libuxl.so - javascript for FF
js_engine - spidermonkey not fully featured

AUDIT TECHNIQUES--

Pass by referecbe maniupulation -- not updating properly or not taking into account what will happen when passed by reference
Improper return values from functions or standard libc functions -- realloc in particular

Examine how calling functions use modified arguments.

Examine memory management
*****

Typed Array Buffers
Array Buffer

Used often used to manipulate low level data

typed arays allow access to array buffer

arraybuffer.transfer only available in FF nightly. Interesting idea potential for UAF and maybe some other things.


Looking into possible type confusion or state confusion in between arraybuffers and typedarraybuffers and the reference chain between the two.

Also interested in function overloading and properties or methods that are read only or limit access and how that is controlled
at the low level.

FUTURE:

JIT


BUFFERS:

So many different variations of buffers. Typed array buffer, array buffer, asm.js buffer(???), sharedarrayrawbuffer

FUNCTIONS TO AUDIT:

//js::TypedArrayMethods<js::SharedTypedArrayObject>::set
TypedArray.prototype.set()

/*Potential for an out of bounds array access here needs more analysis. Looks safe but not certain
Overloading custom object length parameter allows us to continue setting based off an array that is not actually an array

Making array length to large causes failure should not trust array length kind of a bug but not really??
come back and investigate more in the future
seems safe
the conversion between my array object to setting the array buffer needs more investigation 
*/


//prototype methods hidden inside here
//js::Typedarraymethods
TypedArray.prototype.includes()


TypedArray.prototype.subarray()
//NEEDS FULL VARIABLE CHECKING
//AT FIRST GLANCE EVERYTHING LOOKS GUCCI



toString()
//Lots of JS is able to call it so it has to have somewhat intense handling of mutliple types etc...

//CODE
/* static */ const JSFunctionSpec
TypedArrayObject::protoFunctions[] = {
    JS_FN("subarray", TypedArrayObject::subarray, 2, 0),
    JS_FN("set", TypedArrayObject::set, 2, 0),
    JS_FN("copyWithin", TypedArrayObject::copyWithin, 2, 0),
    JS_SELF_HOSTED_FN("every", "TypedArrayEvery", 2, 0),
    JS_SELF_HOSTED_FN("fill", "TypedArrayFill", 3, 0),
    JS_SELF_HOSTED_FN("find", "TypedArrayFind", 2, 0),
    JS_SELF_HOSTED_FN("findIndex", "TypedArrayFindIndex", 2, 0),
    JS_SELF_HOSTED_FN("indexOf", "TypedArrayIndexOf", 2, 0),
    JS_SELF_HOSTED_FN("join", "TypedArrayJoin", 1, 0),
    JS_SELF_HOSTED_FN("lastIndexOf", "TypedArrayLastIndexOf", 2, 0),
    JS_SELF_HOSTED_FN("reduce", "TypedArrayReduce", 1, 0),
    JS_SELF_HOSTED_FN("reduceRight", "TypedArrayReduceRight", 1, 0),
    JS_SELF_HOSTED_FN("reverse", "TypedArrayReverse", 0, 0),
    JS_SELF_HOSTED_FN("some", "TypedArraySome", 2, 0),
    JS_SELF_HOSTED_FN("entries", "TypedArrayEntries", 0, 0),
    JS_SELF_HOSTED_FN("keys", "TypedArrayKeys", 0, 0),
    // Both of these are actually defined to the same object in FinishTypedArrayInit.
    JS_SELF_HOSTED_FN("values", "TypedArrayValues", 0, JSPROP_DEFINE_LATE),
    JS_SELF_HOSTED_SYM_FN(iterator, "TypedArrayValues", 0, JSPROP_DEFINE_LATE),
#ifdef NIGHTLY_BUILD
    JS_SELF_HOSTED_FN("includes", "TypedArrayIncludes", 2, 0),
#endif
    JS_FS_END
};

TypedArray.from()
TypedArray.of()
TypedArray.prototype.copyWithin()
TypedArray.prototype.entries()
TypedArray.prototype.every()
TypedArray.prototype.fill()
TypedArray.prototype.find()
TypedArray.prototype.findIndex()
TypedArray.prototype.includes()
TypedArray.prototype.indexOf()
TypedArray.prototype.join()
TypedArray.prototype.keys()
TypedArray.prototype.lastIndexOf()
TypedArray.prototype.move()
TypedArray.prototype.reduce()
TypedArray.prototype.reduceRight()
TypedArray.prototype.reverse()
TypedArray.prototype.set()
TypedArray.prototype.some()
TypedArray.prototype.subarray()
TypedArray.prototype.values()
TypedArray.prototype[@@iterator]()


// - JSObject
//   - ArrayBufferObject
//     - SharedArrayBufferObject
//   - ArrayBufferViewObject
//     - DataViewObject
//     - TypedArrayObject (declared in vm/TypedArrayObject.h)
//       - TypedArrayObjectTemplate
//         - Int8ArrayObject
//         - Uint8ArrayObject
//         - ...
//     - TypedObject (declared in builtin/TypedObject.h)
//
// Note that |TypedArrayObjectTemplate| is just an implementation
// detail that makes implementing its various subclasses easier.




---
Continue looking through array buffer and typed buffer things. Audit all of there functionality amd how they interact with each other.
Dont be discouraged that you havent gotten super far the code is dense and is difficult to wade throgh. Definetly getting better at 
understanding how and why things are happening. Doing well.


Funcs to audit--

neuter -- ABO.cpp #315





